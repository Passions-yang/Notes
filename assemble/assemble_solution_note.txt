1.1
(1) 13
(2) 1024 0 1023
(3) 8192 1024
(4) 2^30 2^20 2^10
(5) 64K 1M 16M 4G
(6) 1 1 2 2 4
(7) 512 256
(8) 二进制

2.1
(1) F4A3H  31A3H 3123H  6246H 826cH 6246H E4B2
(2) mov AX,2
	add AX,AX
 	add AX,AX
 	add AX,AX

2.2
(1) 10H 1000FH
(2) 1001H	20000H
	
 CS	: 	代码段寄存器
 IP :	指令指针寄存器
 
 任意时刻：cpu读取一条指令都是从 CS x 16 + IP 处开始执行
								段 + 偏移地址
 CPU执行指令都是通过CS:IP 的方式查找
 而修改CS、IP内容的指令被称为转移指令（MOV不被允许操作这两个寄存器
	可以通过jmp指令进行修改）。
	同时修改CS、IP
	jmp 2AE3:3 执行后 ： CS=2AE3H,IP=0003H cpu将在2AE33H处取指令。
	只修改IP
	jmp 某一合法寄存器 ： jmp AX
	
2.3
mov ax，bx
sub ax,ax
jmp ax

总共有四次更改IP 寄存器的值
1. 第一次在读取mov ax，bx 指令之后
2. 第二次在读取sub ax,ax指令之后
3. 第三次在读取jmp ax指令之后，将IP更改为ax
4.在跳转到ax地址时，IP初始化为0000H,ax 也为0000H

3.1 

(1) 20H 4E20H
(3) 12H	0012H
(5) 124EH

mov bx，1000H
mov ds,bx
mov al,[0]
 1000H x 16 + 0 = 物理地址（唯一的内存单元）
[...] 表示一个内存单元，[0] 中的0表示内存单元的偏移地址。
我们知道只知道偏移地址时无法定位一个内存单元的，那么内存单元的段地址在哪里呢？
指令执行时，6086CPU 自动取ds中的数据为内存单元的段地址。

所以说要访问一个内存单元：
1.现将段地址放入一个通用寄存器
	mov bx，1000H
2.将通用寄存器中的内容放入段寄存器DS
	mov ds,bx
3.指明取那个偏移地址上的内容放入寄存器中
	mov al,[0]
在8086 中不能直接将数据放入段寄存器中。


3.2

将al中的值放入地址10000H中。
	mov bx,1000H
	mov ds,bx
	mox [0],al
	
3.1
(1)
	AX	2662H
	BX	E626H
	AX	E626H
	AX	2662H
	BX	D6E6H
	AX	FD48H
(2)
	mov ax,6622H	AX = 6622H BX = 0
	jmp 0FF0:0100	CS = 0FF0H  IP = 0100H
	mov ax,2000H	CS = 1000H	IP = 0000H	AX = 2000H
	mov ds,ax		CS = 1000H	IP = 0003H	AX = 2000H	DS = 2000H
	mov ax,[0008]	CS = 1000H	IP = 0005H	AX = C389H	DS = 2000H
	mov ax,[0002]	CS = 1000H	IP = 0008H  AX = EA66H	DS = 2000H
	
3.7 CPU提供栈机制

栈的位置由两个寄存器确定	SS:SP
	SS ：栈段寄存器
	SP : 寄存器（总是指向栈顶），入栈 sp-2,出栈 sp+2.

	换一个角度看，在任意时刻，SS:SP 指向栈顶元素，当栈为空时，栈中没有元素，
也就是不存在元素，所以SS:SP只能指向栈最底部单元下面的单元。
	栈最底部字单元的地址为1000:000E,所以栈为空时，SP = 0010H.
	
现在就产生一个问题如何去防止栈越界访问数据？
	8086CPU 并没有记录栈的大小的寄存器，也不会去检测，所以越栈空间访问时非常危险的。
	
	3.9
		mov ax,1000H
		mov ss,ax
		mov sp,0010H
		
		mov ax,001AH
		mov bx,001bH
		push ax
		puah bx
		
		pop ax 
		pop bx 
	3.10
		mov ax,1000H
		mov ss,ax
		mov sp,0002H
		
		mov ax,2266H
		push ax 
	3.2
		(1)
			mov ax,2000H
			mov ss,ax
			mov sp,0010H
		(2)
			mov ax,1000H
			mov ss,ax
			mov sp,0010H
			
指令分为伪指令和汇编指令
	伪指令		：是由编译器进行处理
	汇编指令	：是由计算机执行的程序


mov ax,[bx]	表示从ds中拿出段地址，从bx中拿出偏移地址 ds x 16 + bx = 实际地址
		然后放入ax中

定义符号(),表示寄存器或者内存中的值：例如
	（ax）表示 ax寄存器中的值

loop 指令，每次执行一次loop， (cx) = (cx) -1; cx寄存器中的值自动减一。

	在汇编语言中数字不能以字母开头
	像 mov ax,0ffffH	就必须在前面带0
	在汇编中大于 9fffH 的数据有很多比如 A000H,A001H... D000H...FFFF等，在进行汇编编程的时候必须在前面带上0

	
一个程序应该从哪里开始，到哪里运行结束呢？
		如果不指定的情况下，他会根据CS:IP 计算一个程序运行的开始地方，去运行指令。
		我们在大多数情况下需要指定程序运行的起始地点，所以就不必须指定它。一次这就是end的一个作用
	end:
		1.end可以通知程序结束。
		2.end可以指明编译器程序的入口地址。
		参照以下代码：程序是从hh地方开始运行的，并不是从start处开始运行，程序会将代码段中的数据定义进行初始化
			但是，他并不会运行mov bx,21这条语句。初始化bx为21.
		assume cs:code
		code segment
			dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah
		 
			start:mov bx,21
			hh:mov ax,0
			
			   mov cx,7
			  s:add ax,cs:[bx]
			   add bx,2
			   loop s  
				
			   mov ax,4c00h
			   int 21h
			  
		code ends
		end hh

		
7 [bx+idata]

8086 提供这种寻址方式 mov ax,[bx+200] ====>> (ds) x 16 + (bx) + 200
该指令也可以写成：
				mov ax,[200+bx]
				mov ax,200[bx]
				mov ax,[bx].200
	这种方式为c语言中数组寻址提供了汇编机制。
	
	int main()
	{
		char a[] = "BaSic";
		char b[] = "MinIX";
		int i = 0;
		do(
			a[i] &= 0xDF;
			b[i] |= 0x20;
		)while(i < 5)
		printf("%s,%s",a,b);
	}
	
		第八章 处理数据的两个基本问题
		
	1.数据在什么地方
	2.处理的数据有多长

1.数据在什么地方
		8086 常用寄存器如下：
			reg: ax,bx,cx,dx,ah,al,bh,bl,ch,cl,dh,dl,sp,bp,si,di;
			sreg: ds,ss,cs,es
		(1)在8086cpu中只用四个寄存器可以用来进行内存单元的寻址：bx,si,di,bp
			例如：mov ax,[bx]
					mov ax,[bx,si]
					mov ax,[bx+di]
					mov ax,[bp]
					等
			错误的指令是：mov ax,[cx]
							mov ax,[ax]
							mov ax,[dx]
							mov ax,[dx]
		(2) 在[...]中，这四个寄存器都可以单独出现，或者组合出现。但是si和di不能同时出现
						bx和bp不能同时出现。
						
						例如：下面指令就是错误的
								mov ax,[si+di]
								mov ax,[bx+bp]
		(3) 只要在[...]中使用寄存器，而指令中没有显示的给出段地址，段地址就默认在ss段中。
			例如： mov ax,[bp]		（ax）= （ss）x 16 + (bp)
					mov ax,[bp+idata] 	（ax）= （ss）x 16 + (bp) + idata
					mov ax,[bp+si+idata]	（ax）= （ss）x 16 + (bp) + (si) + idata

			
		8086 中寻址方式总结：
				1.直接寻址	mov ax,1
				2.寄存器间接寻址	mov ax,[bx]
				3.寄存器相对寻址	mov ax,[bx + idata]
				4.基址变址寻址		mov ax,[bx+si]
				5.相对基址变址寻址	mov ax,[bx+si+idata] mov ax,[bp + di +idata]
2.指令数据有多长？
	(1) 通过寄存器名，指明要处理数据的尺寸
		例如： mov ax,1		mov al,1
	(2) 在没有寄存器名称的情况下，如何知道呢？
		用操作符X ptr 来指明内存单元的长度，X在汇编中可以是word 或 byte
		
		mov word ptr ds:[0],1	指明将 1 存放在[0][1] 十六位上
		mov byte ptr ds:[0],1	指明将 1 存放在[0] 八位上
	(3) 其他方法
		有些指令会自动默认是字单元还是字节单元，比如，push [1000h] 就不用指明访问的是字还是字节。
		因为push 默认指令只进行字操作。
		
			8.7 div 指令
			
	(1)除数：有八位和十六位两种，在一个reg或者内存单元中。
	(2)被除数：默认放在AX或者DX和AX中。如果除数为8位，被除数位16位，存放在AX中。
		如果除数为16位，被除数位32位，在DX和AX中存放，DX存放高16位，AX存放低十六位。
	(3) 结果：如果除数为8位，则AL存储除法操作的商，AH存放除法操作的余数。
			如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。
	
	格式如下：
		div reg
		div 内存单元
		
	div byte ptr ds:[0]
	含义：(al) = (ax)/((ds)x16 + 0) 的商
		  (ah) = (ax)/((ds)x16 + 0) 的余数
		  
	div word ptr es:[0]
	含义：(ax) = [(dx)x 10000H + (ax)]/((es)x 16 + 0) 的商
			(dx) = [(dx)x 10000H + (ax)]/((es)x 16 + 0) 的余数
			
			
			8.8 双字节 dd
	
	以前使用db 字节，dw 字，dd用来定义双字类型。例如：
		db 1
		dw 1
		dd 1
		
	用计算机完成 div 计算data 段中第一个数据除以第二个数据后的结果，商存在第三个数据的存储单元中。
		data segment
			dd 100001
			dw 100
			dw 0
		data ends
		
		mov ax，data
		mov ds,ax
		mov ax,ds:[0]
		mov dx,ds:[2]
		div word ptr ds:[4]
		mov ds:[6],ax		;将商存储在 第三个字节中。
		
		8.9 	dup 
		
		dup 是一个操作符重复指令。一般和db,dw,dd联合使用。
		
		db 3 dup (0) =====> db 0,0,0
		db 3 dup ('a','b') =====> db ababab
		
			第九章 转移指令的原理
	
	由于cpu执行的代码是从cs:ip进行取址的，所以更改这两个寄存器的值，就可以实现指令转移。
	
	1. 只修改IP时，称为段内转移，比如：jmp ax.
	2. 同时修改cs:ip时，称为段间转移，例如： jmp 1000:0
	
	由对ip的修改范围不同，段内转移又分为：短转移和近转移
		1. 短转移：ip 修改范围为： -127~+127
		2. 近转移：ip 修改范围为： -32768~+32767
	8086CPU 的转移指令分为以下几类。
		1. 无条件转移指令（jmp）
		2. 条件转移指令
		3. 循环指令（loop）
		4. 过程
		5. 中断
		
		
	hello world
		
		
			


    
    
    
		
	
	


	

	







